@model Flow
@{
    //Get total number of forms in the flow
    int totalForms = Model.forms.Count;
    int currentForm = ViewBag.FormIndex;
}
<style>
    .container {
        position: relative;
    }

        .container canvas, .overlay {
            position: absolute;
        }

    .overlay {
        /* We wil use this overlay to draw th form ontop of the PDF document.
           The PDF is for all intents and purposes a fancy background picture, and the guts of this are entirely in our overlay and the form inside of it
        */
        position: absolute;
        z-index: 100;
        opacity: .8;
    }

    .nomargin {
        margin: 0 0 0 0;
        padding: 0 0 0 0;
    }

    .overlay input {
        position: relative;
    }

    /*  ---------------------- Popup style sheet  -------------------------------------  */

    {
        box-sizing: border-box;
    }

    .arrow-left {
        width: 0px;
        height: 0px;
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-right: 10px solid #808080;
    }

    /* The popup form - hidden by default */
    .form-popup {
        display: none;
        position: absolute;
        
        z-index: 9;
    }

    /* Add styles to the form container */
    .form-container {
        border: 3px solid #808080;
        max-width: 300px;
        padding: 10px;
        background-color: #FFFFFC;
    }

        /* Full-width input fields */
        .form-container input[type=text] {
            width: 100%;
            padding: 15px;
            margin: 5px 0 22px 0;
            border: none;
            background: #f1f1f1;
        }

            /* When the inputs get focus, do something */
            .form-container input[type=text]:focus, .form-container input[type=password]:focus {
                background-color: #ddd;
                outline: none;
            }

        /* Add some hover effects to buttons */
        .form-container .btn:hover, .open-button:hover {
            opacity: 1;
        }
</style>
<div class="form-popup" id="myForm" onkeyup="tagsKeyUp(event)">
    <div class="pull-left arrow-left" style="height:100%;"></div>

    <div class="form-container pull-right">

        <!-- <label><b>Prompt</b></label> -->

        <label>
            Choose the prompt that maps to here:

        </label>
        <input list="tags" name="tags">
        <datalist id="tags">
            @foreach (var field in Model.inputSurvey.fields)
            {
                <option value="@field.tag">@field.prompt</option>
            }
        </datalist>
        <input type="hidden" name="outputTag" id="outputTag">
        <a class="btn btn-success btn-sm" onclick="closeAndFillForm()">Fill</a>
        <a class="btn btn-danger btn-sm" onclick="closeForm()">Close</a>
    </div>
</div>
<div class="container" id="canvascontainer">
    <div id="overlaydiv" class="overlay nomargin">
        <form id="overlay-form" class="nomargin"></form>
    </div>

    <canvas id="canvas" width="500" height="500"></canvas>
</div>
<div class="row" style="vertical-align:bottom;">

    <div class="col-md-offset btn btn-primary" id="save-button">Save Form</div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/pdf.js/pdf.js"></script>
    <script src="~/lib/pdf.js/pdf.worker.js"></script>


    <script>
        var pdfScale = 1.5;
        var viewport = null;

        //handle escape and enter presses for the fill window
        function tagsKeyUp(evt) {
            if (evt && evt.key == "Escape") {
                closeForm();
            }
            else if (evt && evt.key == "Enter") {
                closeAndFillForm();
            }
        }

            //open the tags popup at the element at X, absolute to the page.
            function openForm(x) {
                console.log(x.getAttribute("data-fieldname"));
                document.getElementById("outputTag").value = x.getAttribute("data-fieldname");
                var myForm = document.getElementById("myForm");                
                
                myForm.style.display = "block";
                myForm.style.position="absolute";

                
                myForm.style.zIndex = "1000" //don't go over the menu                
                var left = x.offsetLeft + (myForm.clientWidth / 2);
                var top = x.offsetTop;
                
                myForm.style.left = `${left}px`;
                myForm.style.top = `${top}px`;                
                document.getElementsByName("tags")[0].focus();
                myForm.style.left = left.toString() + "px";
                //myForm.style.top = top.toString() + "px";               
            }

            function closeAndFillForm() {
                document.getElementById("myForm").style.display = "none";
                var intag = document.getElementsByName("tags")[0].value;
                console.log(intag);
                var n = document.getElementById("outputTag").value;
                var out = $('[data-fieldname="'+n+'"]')
                out[0].value = intag;
                console.log(out);
                 document.getElementsByName("tags")[0].value = "";
                return false;
                //TODO: Grab take intag and assign it to the box


            }
            function closeForm() {
                document.getElementById("myForm").style.display = "none";
                 document.getElementsByName("tags")[0].value = "";
                 return false;

            }
            document.addEventListener('DOMContentLoaded', function()
            {
            //put existing values from this assignment into a obj map
                assignments = [];
                @foreach (var a in Model.forms[currentForm].assignments)
                {
                    @:assignemnt = { inputField: '@a.inputField', outputField: '@a.outputField' };
                    @:assignments.push(assignemnt);


                }
                loadingtask =  pdfjsLib.getDocument('/forms/templateForms/@Model.Id/@Model.forms[currentForm].fileName');
                loadingtask.promise.then(function (pdf) {

                    pdf.getPage(1).then(function (page) {
                        var canvas = document.getElementById('canvas');
                        viewport = page.getViewport(pdfScale)
                        console.log("Annotations:");

                        console.log("I have a page.!");
                        console.log("Page:" + page);
                        console.log("Viewport");
                        console.log(viewport);


                        var context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;
                        var overlayDiv = document.getElementById('overlaydiv');
                        overlayDiv.style.height = viewport.height + "px";
                        overlayDiv.style.width = viewport.width + "px";

                        var container = document.getElementById('canvascontainer');
                        container.style.height = overlayDiv.style.height;
                        container.style.width = overlayDiv.style.width;
                        var renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        renderTask = page.render(renderContext);
                        renderTask.promise.then(function (err) {
                            console.log('Page rendered');
                            console.log(err);
                        });

                        page.getAnnotations().then(function (items) {
                            var canvas_offset =
                                //For each input of "tx" type, make an input box
                                items.forEach((element) => {
                                    if (element.fieldType = "Tx") {
                                        //if there is a text field, create an input box in the overlay
                                        inputTag = document.createElement('div');
                                        inputTag.className = "nomargin";

                                        //get the value from assignments if it exists, and put it in the field
                                        var foundValue = assignments.find((a) => {
                                            return (a.outputField == element.fieldName);
                                        });
                                        var blank = "";
                                        if (foundValue) {
                                            console.log(`Found a value : ${foundValue.inputField}`);
                                            blank = foundValue.inputField;
                                        }

                                        var heightPx = (element.rect[3] - element.rect[1]) * pdfScale;
                                        var widthPx = (element.rect[2] - element.rect[0]) * pdfScale;
                                        var leftPx = element.rect[0] * pdfScale;
                                        var topPx = viewport.height - (element.rect[1] * pdfScale) - heightPx;

                                        // console.log("WIDTH: "+ element.fieldName+ " :: "+widthInch + " inches");
                                        //console.log("HEIGHT: "+ element.fieldName+ " :: "+heightInch + " inches");  -->
                                        inputTag.innerHTML = `<input type='text'  data-fieldname='${element.fieldName}' value='${blank}' class='assignment-input open-button' onclick='openForm(this)' style='border: 1px solid red; position: absolute; padding: 0px; margin:0px;left: ${leftPx}px; top: ${topPx}px; width:${widthPx}px; height:${heightPx}px;' readonly/>`;
                                        //console.log("Fieldname:"+ element.fieldName);
                                        //Figure out
                                        document.getElementById("overlay-form").append(inputTag);
                                    }
                                });
                            //items[0].borderStyle.width = 10;
                            console.log(items);
                        });
                    });
                });

                //fill in assignment values into fields
                //TODO: Iterate through assignments and fill back in what we can

                //get total and current forms into js
                var totalForms = @totalForms;
                var currentForm = @currentForm;

                //jquery stuff for submitting the form
                $(function () {
                    $("#save-button").click(() => {
                    form = {
                    id : '@Model.forms[currentForm].Id',
                            Assignments : []
                        };
                        //look at every box with class assignment-input
                        //build up a in-memory list of assignments
                        $(".assignment-input").each(function (element) {
                        var assignment = {
                                outputField: $(this).data('fieldname'),
                                inputField: $(this).val()
                            };
                            form.Assignments.push(assignment);
                });

                        console.log(form);

                        //and post them to /assign
                        $.ajax({
                            type: "POST",
                            url: "/Template/Assign",
                            data: form,
                            success: function () {
                                console.log("It worked.");
                                //increment the form if any are left.
                                if (currentForm >= (totalForms - 1)) {
                                    window.location = "/Flow";
                                }
                                else {
                                    window.location = "/Template/Assign/?id=@Model.Id&formNum=@(currentForm+1)";
                                }

                            }, error: function (err) {
                                console.log(err);
                            }


                        });
                        //when im done, take me back
                    });
                });
      });
    </script>



}
