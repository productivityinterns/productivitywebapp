@model ProductivityApp.Models.ViewModels.TemplateFieldsViewModel

@{
    ViewData["Title"] = "Fields";
}
<style>
    .form-inline
    {
        margin-bottom: 0.3em;
    }
    .tag {
        width: 10em;
    }

    .prompt {
        width: 20em;
    }
</style>
<h2>Fields</h2>

<h4>TemplateFieldsViewModel</h4>
<hr />
@{ var fieldCtr = -1;
    var criteriaCtr = -1;}
<form asp-action="Fields">

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="Id" />
    <h4>Fields</h4>
    <div id="fields-container">
        @if (Model.Fields != null){
            @foreach (var field in Model.Fields)
        {
            fieldCtr++;
            <div class="form-inline">

                <div class="form-group">
                    <label>Tag <span class="glyphicon glyphicon-info-sign" title="This is a short name used for referencing the data a user enters."></span></label>
                    <input class="form-control tag" name="Fields[@fieldCtr].tag" value="@field.tag" />
                </div>
                <div class="form-group">
                    <label>Prompt <span class="glyphicon glyphicon-info-sign" title="This is a longer question/statement asking a user for data."></span></label>
                    <input class="form-control prompt" name="Fields[@fieldCtr].prompt" value="@field.prompt" />
                </div>
                <div class="form-group">
                    <label>Kind</label>

                    <select class="form-control" name="Fields[@fieldCtr].Kind">
                        @foreach (Field.Kinds kind in Enum.GetValues(typeof(Field.Kinds)))
                        {
                            if (kind == field.Kind)
                            {
                                <option selected>@kind.ToString()</option>
                            }
                            else
                            {
                                <option>@kind.ToString()</option>
                            }
                        }
                        <option>String</option>foreach
                        <option>Number</option>
                        <option>Date</option>
                    </select>
                </div>
                <div class="form-group">
                    <div id="remove-field-button" value="" class="btn btn-danger" onClick="DeleteField(this)"><span class="glyphicon glyphicon-trash"></span></div>

                </div>
            </div>
        }
        }
        
    </div>
    <div class="form-group">
        <div id="add-field-button" value="Add new field" class="btn btn-primary">Add new field</div>
    </div>

    <h4>Criteria</h4>
    <div id="criteria-container">
        @if(Model.Criteria != null) {
        @foreach (var criteria in Model.Criteria)
        {
            criteriaCtr++;
            <div class="form-inline">
                <div class="form-group">
                    <label>Category  <span class="glyphicon glyphicon-info-sign" title="This is a short name used for referencing the data a user enters."></span></label>
                    <input class="form-control category" name="Criteria[@criteriaCtr].Category" value="@criteria.Category" />
                </div>
                <div class="form-group">
                    <label>Prompt <span class="glyphicon glyphicon-info-sign" title="This is a longer question/statement asking a user for data."></span></label>
                    <input class="form-control prompt" name="Criteria[@criteriaCtr].Prompt" value="@criteria.prompt" />
                </div>                
                @{ var theAnswers = string.Join(",", criteria.answers.Select(s => s.Text).ToList());}
                <div class="form-group">
                    <label>Answers</label>
                    <input class="form-control answer" name="Criteria[@criteriaCtr].SelectedValue" value="@theAnswers"/>

                </div>
                <div class="form-group">
                    <div value="" class="btn btn-danger" onClick="DeleteField(this)"><span class="glyphicon glyphicon-trash"></span></div>
                </div>
            </div>

        }
        }
        
    </div>
    <div>
        <div id="add-criteria-button" value="Add new criteria" class="btn btn-primary">Add new criteria</div>
    </div>

    <div class="form-group">
        <input type="submit" onclick="return Alert('You havent entered any fields.');" value="Save" class="btn btn-success" />
    </div>

</form>


<div id="new-field-template" style="display:none" class="form-inline">
    <div class="form-group">
        <label>Tag <span class="glyphicon glyphicon-info-sign" title="This is a short name used for referencing the data a user enters."></span></label>
        <input class="tag form-control" name="Fields[@fieldCtr].tag" />
    </div>
    <div class="form-group">
        <label>Prompt <span class="glyphicon glyphicon-info-sign" title="This is a longer question/statement asking a user for data."></span></label>
        <input class="prompt form-control" name="Fields[@fieldCtr].prompt" />
    </div>
    <div class="form-group">
        <label>Kind</label>

        <select class="kind form-control" name="Fields[@fieldCtr].Kind">
            @foreach (Field.Kinds kind in Enum.GetValues(typeof(Field.Kinds)))
            {
                <option>@kind.ToString()</option>
            }
            <option>String</option>foreach
            <option>Number</option>
            <option>Date</option>
        </select>

    </div>
    <div class="form-group">
        <div id="remove-field-button" value="" class="btn btn-danger" onClick="DeleteField(this)"><span class="glyphicon glyphicon-trash"></span></div>

    </div>

</div>


<div id="new-criteria-template" style="display:none;" class="form-inline">
    <div class="form-group">
        <label>Category  <span class="glyphicon glyphicon-info-sign" title="This is a short name used for referencing the data a user enters."></span></label>
        <input class="category form-control" name="Criteria[@criteriaCtr].category" />
    </div>
    <div class="form-group">
        <label>Prompt <span class="glyphicon glyphicon-info-sign" title="This is a longer question/statement asking a user for data."></span></label>
        <input class="prompt form-control" name="Criteria[@criteriaCtr].prompt" />
    </div>
    <div class="form-group">
        <label>Answers</label>
        <input class="form-control answer" name="Criteria[@criteriaCtr].SelectedValue ">                    
    </div>
    <div class="form-group">
        <div id="remove-criteria-button" value="delete criteria" class="btn btn-danger" onClick="DeleteField(this)"><span class="glyphicon glyphicon-trash"></span></div>
    </div>
   
</div>


        


<div>
    <a asp-action="Index" asp-controller="Flow">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>


            function DeleteField(field)
            {
               $(field).parent().parent().remove();
            }


            $(function () {
                var fieldCtr = @fieldCtr
                    console.log(fieldCtr);

                $("#add-field-button").click(() => {
                    console.log("I dun clicked it");
                    fieldCtr = fieldCtr + 1;
                    //todo: set counter for fields
                    fieldName = `Fields[${fieldCtr}]`
                    clone = $("#new-field-template").clone(false);
                    $(clone).find(".tag").attr("name", fieldName + ".tag");
                    $(clone).find(".kind").attr("name", fieldName + ".kind");
                    $(clone).find(".prompt").attr("name", fieldName + ".prompt");
                    $(clone).attr('id', `new-field-${fieldCtr}`);
                    $(clone).show().appendTo("#fields-container");
                });

                 var criteriaCtr = @criteriaCtr
                    console.log(criteriaCtr);
                $("#add-criteria-button").click(() => {
                    console.log("I dun clicked it");
                    criteriaCtr = criteriaCtr + 1;
                    //todo: set counter for fields
                    criteriaName = `Criteria[${criteriaCtr}]`
                    clone = $("#new-criteria-template").clone(false);
                    $(clone).find(".category").attr("name", criteriaName + ".Category");
                    $(clone).find(".prompt").attr("name", criteriaName + ".Prompt");
                    $(clone).find(".answer").attr("name", criteriaName + ".SelectedValue");
                    console.log(criteriaName)
                    $(clone).attr('id', `new-criteria-${criteriaCtr }`);
                    $(clone).show().appendTo("#criteria-container");
                });
            });
    </script>

}
